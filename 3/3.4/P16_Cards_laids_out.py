"""Расклад таков...

Виталий любит играть в карты. Он решил выяснить, какие есть вариации вытащить из колоды определённые тройки карт.
Напишите программу, которая выводит список вариантов согласно требованиям.

Формат ввода
В первой строке записана масть, которая должна присутствовать в тройке.
Во второй строке записан достоинство, которого не должно быть в тройке.

Формат вывода
Выведите на экран первые 10 получившихся троек.
Карты в каждой комбинации должны быть отсортированы лексикографически (по строке названия карты).
Карты комбинации выводятся через запятую с пробелом после неё.
Комбинации между собой также должны быть отсортированы в лексикографическом порядке по строке, представляющей комбинацию целиком.

Примечание
Обратите внимание: валет-дама-король-туз лексикографически упорядочены. Но «10 ...» лексикографически младше,
чем «2 ...», а бубны младше, чем пики.

Масти в именительном и родительном падежах:

Именительный	Родительный
буби	        бубен
пики	        пик
трефы	        треф
черви	        червей

Ввод:
пики
10

Вывод:
2 бубен, 2 пик, 2 треф
2 бубен, 2 пик, 2 червей
2 бубен, 2 пик, 3 бубен
2 бубен, 2 пик, 3 пик
2 бубен, 2 пик, 3 треф
2 бубен, 2 пик, 3 червей
2 бубен, 2 пик, 4 бубен
2 бубен, 2 пик, 4 пик
2 бубен, 2 пик, 4 треф
2 бубен, 2 пик, 4 червей"""


from itertools import product, permutations


def solution(exception_color: str, exception_nominal: str):
    colors = ["буби", "пики", "трефы", "черви"]
    colors_change = ["бубен", "пик", "треф", "червей"]

    index = ''
    for i in range(len(colors)):

        if colors[i] == exception_color:
            index = i
            break

    compulsory_color = colors_change[index]
    nominal = ['10', '2', '3', '4', '5', '6', '7', '8', '9', 'валет', 'дама', 'король', 'туз']
    nominal.remove(exception_nominal)

    cards = list(product(sorted(nominal), colors_change))
    combinations = sorted(permutations(cards, r=3))

    for comb in combinations:

        for s in comb:
            if compulsory_color in s:

                print(", ".join([str(" ".join(i)) for i in comb]))
                break


def main():
    exception_color = input()
    exception_nominal = input()
    solution(exception_color, exception_nominal)


if __name__ == '__main__':
    main()
